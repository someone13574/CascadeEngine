#version 460

layout(local_size_x = 32, local_size_y = 32) in;

// bindings
layout(binding = 4, rgba8) uniform image2D render_target;

layout(binding = 0) uniform Camera_Data
{
    float matrix_x0;
    float matrix_x1;
    float matrix_x2;
    float matrix_y0;
    float matrix_y1;
    float matrix_y2;
    float matrix_z0;
    float matrix_z1;
    float matrix_z2;

    float origin_x;
    float origin_y;
    float origin_z;

    uint which_hit_buffer;

    uint pa;
    uint pb;
    uint pc;
} camera_data;

struct Object
{
    float object_to_world_matrix_x0;
    float object_to_world_matrix_x1;
    float object_to_world_matrix_x2;
    float object_to_world_matrix_x3;

    float object_to_world_matrix_y0;
    float object_to_world_matrix_y1;
    float object_to_world_matrix_y2;
    float object_to_world_matrix_y3;

    float object_to_world_matrix_z0;
    float object_to_world_matrix_z1;
    float object_to_world_matrix_z2;
    float object_to_world_matrix_z3;

    uint root_voxel_index;

    uint padding_a;
    uint padding_b;
    uint padding_c;
};

layout(std140, binding = 1) buffer object_buffer
{
    Object objects[];
};

struct Voxel
{
    float x;
    float y;
    float z;
    float size;

    mat4x4 links;

    float normal_x;
    float normal_y;
    float normal_z;

    float color_r;
    float color_g;
    float color_b;

    uint padding_a;
    uint padding_b;
};

layout(std140, binding = 2) buffer voxel_buffer
{
    Voxel voxels[];
};

layout(std140, binding = 3) buffer hit_buffer
{
    ivec4 hit_counts[];
};

float Ray_Box_Intersection(vec3 ray_origin, vec3 fractional_ray_direction, vec3 box_size)
{
    vec3 t0 = (-box_size - ray_origin) * fractional_ray_direction;
    vec3 t1 = (box_size - ray_origin) * fractional_ray_direction;

    vec3 tmin = min(t0, t1);
    vec3 tmax = max(t0, t1);

    float min_component = min(min(tmax.x, tmax.y), tmax.z);
    float max_component = max(max(tmin.x, tmin.y), tmin.z);

    if (max_component > min_component || min_component < 0.0)
    {
        return -1.0;
    }
    else
    {
        return min_component;
    }
}

void Intersect_Scene(vec3 ray_origin, vec3 ray_direction, out vec3 color, out vec3 normal, out vec3 hit_position, out float hit_distance)
{
    uint iteration = 0;

    color = vec3(0.0, 0.0, 0.0);
    normal = vec3(0.0, 0.0, 0.0);
    hit_distance = 1.0 / 0.0;

    for (uint object_index = 0; object_index < objects.length(); object_index++)
    {
        mat4x4 object_to_world_matrix = mat4x4(objects[object_index].object_to_world_matrix_x0, objects[object_index].object_to_world_matrix_x1, objects[object_index].object_to_world_matrix_x2, objects[object_index].object_to_world_matrix_x3, objects[object_index].object_to_world_matrix_y0, objects[object_index].object_to_world_matrix_y1, objects[object_index].object_to_world_matrix_y2, objects[object_index].object_to_world_matrix_y3, objects[object_index].object_to_world_matrix_z0, objects[object_index].object_to_world_matrix_z1, objects[object_index].object_to_world_matrix_z2, objects[object_index].object_to_world_matrix_z3, 0.0, 0.0, 0.0, 1.0);
        mat4x4 world_to_object_matrix = inverse(object_to_world_matrix);

        vec3 transformed_ray_origin = (vec4(ray_origin, 1.0) * world_to_object_matrix).xyz;
        vec3 transformed_ray_direction = normalize((vec4(ray_direction, 0.0) * world_to_object_matrix).xyz);

        vec3 fractional_ray_direction = 1.0 / transformed_ray_direction;

        uint direction_index_low = uint(transformed_ray_direction.x < 0.0) | (uint(transformed_ray_direction.y < 0.0) << 1);
        uint direction_index_high = uint(transformed_ray_direction.z < 0.0);

        uint current_index = objects[object_index].root_voxel_index;
        while (iteration < 1000000)
        {
            iteration++;

            Voxel current_voxel = voxels[current_index];

            float dst = Ray_Box_Intersection(transformed_ray_origin - vec3(current_voxel.x, current_voxel.y, current_voxel.z), fractional_ray_direction, vec3(current_voxel.size));

            if (dst > 0.0)
            {
                vec3 local_hit_position = transformed_ray_direction * dst + transformed_ray_origin;

                //
                if (dot(vec3(current_voxel.normal_x, current_voxel.normal_y, current_voxel.normal_z), transformed_ray_direction) > -0.3)
                {
                    if (camera_data.which_hit_buffer == 0)
                    {
                        atomicAdd(hit_counts[current_index].x, 50);
                        atomicAnd(hit_counts[current_index].y, 0);
                    }
                    else if (camera_data.which_hit_buffer == 1)
                    {
                        atomicAdd(hit_counts[current_index].y, 50);
                        atomicAnd(hit_counts[current_index].z, 0);
                        hit_counts[current_index].w = 0;
                    }
                    else if (camera_data.which_hit_buffer == 2)
                    {
                        atomicAdd(hit_counts[current_index].z, 50);
                        atomicAnd(hit_counts[current_index].w, 0);
                        hit_counts[current_index].x = 0;
                    }
                    else if (camera_data.which_hit_buffer == 3)
                    {
                        atomicAdd(hit_counts[current_index].w, 50);
                        atomicAnd(hit_counts[current_index].x, 0);
                    }
                }
                else
                {
                    if (camera_data.which_hit_buffer == 0)
                    {
                        atomicAdd(hit_counts[current_index].x, 1);
                        atomicAnd(hit_counts[current_index].y, 0);
                    }
                    else if (camera_data.which_hit_buffer == 1)
                    {
                        atomicAdd(hit_counts[current_index].y, 1);
                        atomicAnd(hit_counts[current_index].z, 0);
                        hit_counts[current_index].w = 0;
                    }
                    else if (camera_data.which_hit_buffer == 2)
                    {
                        atomicAdd(hit_counts[current_index].z, 1);
                        atomicAnd(hit_counts[current_index].w, 0);
                        hit_counts[current_index].x = 0;
                    }
                    else if (camera_data.which_hit_buffer == 3)
                    {
                        atomicAdd(hit_counts[current_index].w, 1);
                        atomicAnd(hit_counts[current_index].x, 0);
                    }
                }
                //

                uint temp = floatBitsToUint(current_voxel.links[direction_index_high][direction_index_low]);

                uint hits = 0;

                if (camera_data.which_hit_buffer == 0)
                {
                    hits = hit_counts[current_index].w;
                }
                else if (camera_data.which_hit_buffer == 1)
                {
                    hits = hit_counts[current_index].x;
                }
                else if (camera_data.which_hit_buffer == 2)
                {
                    hits = hit_counts[current_index].y;
                }
                else if (camera_data.which_hit_buffer == 3)
                {
                    hits = hit_counts[current_index].z;
                }

                if (temp == -1 || hits < 8)
                {
                    vec3 temp_hit_position = (vec4(local_hit_position, 1.0) * object_to_world_matrix).xyz;
                    float temp_hit_distance = length(temp_hit_position - ray_origin);

                    if (temp_hit_distance < hit_distance)
                    {
                        hit_position = temp_hit_position;
                        normal = normalize((vec4(current_voxel.normal_x, current_voxel.normal_y, current_voxel.normal_z, 0.0) * object_to_world_matrix).xyz);
                        color = vec3(current_voxel.color_r, current_voxel.color_g, current_voxel.color_b);
                        hit_distance = temp_hit_distance;
                    }
                    break;
                }
                else
                {
                    current_index = temp;
                }
            }
            else
            {
                current_index = floatBitsToUint(current_voxel.links[2 + direction_index_high][direction_index_low]);

                if (current_index == -1)
                {
                    break;
                }
            }
        }
    }
}

// code
void main()
{
    vec2 texture_size = imageSize(render_target);
    vec2 uv = (-texture_size + 2.0 * (gl_GlobalInvocationID.xy + vec2(0.5, 0.5))) / texture_size.y;

    vec3 ray_origin = vec3(camera_data.origin_x, camera_data.origin_y, camera_data.origin_z);
    vec3 ray_direction = normalize(vec3(uv.x, -uv.y, 1.0) * mat3x3(camera_data.matrix_x0, camera_data.matrix_x1, camera_data.matrix_x2, camera_data.matrix_y0, camera_data.matrix_y1, camera_data.matrix_y2, camera_data.matrix_z0, camera_data.matrix_z1, camera_data.matrix_z2));

    vec3 hit_position = vec3(0.0, 0.0, 0.0);
    vec3 normal = vec3(0.0, 0.0, 0.0);
    vec3 color = vec3(0.0, 0.0, 0.0);
    float hit_distance = 0.0;
    Intersect_Scene(ray_origin, ray_direction, color, normal, hit_position, hit_distance);

    imageStore(render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color * max(dot(normal, normalize(vec3(1.0, 1.0, 0.0))), 0.25), 1.0));
    //imageStore(render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}