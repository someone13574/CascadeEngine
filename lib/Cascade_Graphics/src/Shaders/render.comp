#version 450

layout(local_size_x = 32, local_size_y = 32) in;

// bindings
layout(binding = 0, rgba8) uniform image2D render_target;

layout(binding = 1) uniform Camera_Data
{
    float matrix_x0;
    float matrix_x1;
    float matrix_x2;
    float matrix_y0;
    float matrix_y1;
    float matrix_y2;
    float matrix_z0;
    float matrix_z1;
    float matrix_z2;

    float origin_x;
    float origin_y;
    float origin_z;
} camera_data;

struct Voxel
{
    float x;
    float y;
    float z;
    float size;
};

layout(std140, binding = 2) buffer voxel_buffer
{
    Voxel voxels[];
};

float Ray_Box_Intersection(vec3 origin, vec3 fractional_ray_direction, vec3 box_min, vec3 box_max, float max_dst)
{
    vec3 t1 = (box_min - origin) * fractional_ray_direction;
    vec3 t2 = (box_max - origin) * fractional_ray_direction;

    float min_t = max(max(min(t1.x, t2.x), min(t1.y, t2.y)), min(t1.z, t2.z));
    float max_t = min(min(max(t1.x, t2.x), max(t1.y, t2.y)), max(t1.z, t2.z));

    if (max_t >= min_t)
    {
        return abs(min_t);
    }
    else
    {
        return 1.0 / 0.0;
    }
} 

// code
void main()
{
    vec2 texture_size = imageSize(render_target);
    vec2 uv = (-texture_size + 2.0 * (gl_GlobalInvocationID.xy + vec2(0.5, 0.5))) / texture_size.y;

    vec3 ray_origin = vec3(camera_data.origin_x, camera_data.origin_y, camera_data.origin_z);
    vec3 ray_direction = normalize(vec3(uv.x, -uv.y, -1.0) * mat3x3(camera_data.matrix_x0, camera_data.matrix_x1, camera_data.matrix_x2, camera_data.matrix_y0, camera_data.matrix_y1, camera_data.matrix_y2, camera_data.matrix_z0, camera_data.matrix_z1, camera_data.matrix_z2));
    vec3 fractional_ray_direction = 1.0 / ray_direction;

    float min_dst = 1.0 / 0.0;
    for (uint i = 0; i < voxels.length(); i++)
    {
        min_dst = min(min_dst, Ray_Box_Intersection(ray_origin, fractional_ray_direction, vec3(voxels[i].x, voxels[i].y, voxels[i].z) - vec3(voxels[i].size), vec3(voxels[i].x, voxels[i].y, voxels[i].z) + vec3(voxels[i].size), 1.0 / 0.0));
    }

    imageStore(render_target, ivec2(gl_GlobalInvocationID.xy), vec4(min_dst / 8.0, 0.0, 0.0, 1.0));
}