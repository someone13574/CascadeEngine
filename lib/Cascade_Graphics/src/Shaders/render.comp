#version 460

layout(local_size_x = 32, local_size_y = 32) in;

// bindings
layout(binding = 0, rgba8) uniform image2D render_target;

layout(binding = 1) uniform Camera_Data
{
    float matrix_x0;
    float matrix_x1;
    float matrix_x2;
    float matrix_y0;
    float matrix_y1;
    float matrix_y2;
    float matrix_z0;
    float matrix_z1;
    float matrix_z2;

    float origin_x;
    float origin_y;
    float origin_z;

    uint which_hit_buffer;

    uint pa;
    uint pb;
    uint pc;
} camera_data;

struct Voxel
{
    float x;
    float y;
    float z;
    float size;

    mat4x4 links;

    float normal_x;
    float normal_y;
    float normal_z;

    float color_r;
    float color_g;
    float color_b;

    uint padding_a;
    uint padding_b;
};

layout(std140, binding = 2) buffer voxel_buffer
{
    Voxel voxels[];
};

layout(std140, binding = 3) buffer hit_buffer
{
    ivec4 hit_counts[];
};

bool Ray_Box_Intersection(vec3 ray_origin, vec3 fractional_ray_direction, vec3 box_size)
{
    vec3 t0 = (-box_size - ray_origin) * fractional_ray_direction;
    vec3 t1 = (box_size - ray_origin) * fractional_ray_direction;

    vec3 tmin = min(t0, t1);
    vec3 tmax = max(t0, t1);

    float min_component = min(min(tmax.x, tmax.y), tmax.z);
    float max_component = max(max(tmin.x, tmin.y), tmin.z);

    return max_component <= min_component && min_component >= 0.0;
}

// code
void main()
{
    vec2 texture_size = imageSize(render_target);
    vec2 uv = (-texture_size + 2.0 * (gl_GlobalInvocationID.xy + vec2(0.5, 0.5))) / texture_size.y;

    vec3 ray_origin = vec3(camera_data.origin_x, camera_data.origin_y, camera_data.origin_z);
    vec3 ray_direction = normalize(vec3(uv.x, -uv.y, 1.0) * mat3x3(camera_data.matrix_x0, camera_data.matrix_x1, camera_data.matrix_x2, camera_data.matrix_y0, camera_data.matrix_y1, camera_data.matrix_y2, camera_data.matrix_z0, camera_data.matrix_z1, camera_data.matrix_z2));
    vec3 fractional_ray_direction = 1.0 / ray_direction;

    uint direction_index_low = uint(ray_direction.x < 0.0) | (uint(ray_direction.y < 0.0) << 1);
    uint direction_index_high = uint(ray_direction.z < 0.0);

    vec3 normal = vec3(0);
    vec3 color = vec3(0);

    uint current_index = 0;

    uint iteration = 0;
    while (iteration < 1000000000)
    {
        iteration++;

        Voxel current_voxel = voxels[current_index];

        if (Ray_Box_Intersection(ray_origin - vec3(current_voxel.x, current_voxel.y, current_voxel.z), fractional_ray_direction, vec3(current_voxel.size)))
        {
            //
            if (dot(vec3(current_voxel.normal_x, current_voxel.normal_y, current_voxel.normal_z), ray_direction) > -0.3)
            {
                if (camera_data.which_hit_buffer == 0)
                {
                    atomicAdd(hit_counts[current_index].x, 50);
                    atomicAnd(hit_counts[current_index].y, 0);
                }
                else if (camera_data.which_hit_buffer == 1)
                {
                    atomicAdd(hit_counts[current_index].y, 50);
                    atomicAnd(hit_counts[current_index].z, 0);
                    hit_counts[current_index].w = 0;
                }
                else if (camera_data.which_hit_buffer == 2)
                {
                    atomicAdd(hit_counts[current_index].z, 50);
                    atomicAnd(hit_counts[current_index].w, 0);
                    hit_counts[current_index].x = 0;
                }
                else if (camera_data.which_hit_buffer == 3)
                {
                    atomicAdd(hit_counts[current_index].w, 50);
                    atomicAnd(hit_counts[current_index].x, 0);
                }
            }
            else
            {
                if (camera_data.which_hit_buffer == 0)
                {
                    atomicAdd(hit_counts[current_index].x, 1);
                    atomicAnd(hit_counts[current_index].y, 0);
                }
                else if (camera_data.which_hit_buffer == 1)
                {
                    atomicAdd(hit_counts[current_index].y, 1);
                    atomicAnd(hit_counts[current_index].z, 0);
                    hit_counts[current_index].w = 0;
                }
                else if (camera_data.which_hit_buffer == 2)
                {
                    atomicAdd(hit_counts[current_index].z, 1);
                    atomicAnd(hit_counts[current_index].w, 0);
                    hit_counts[current_index].x = 0;
                }
                else if (camera_data.which_hit_buffer == 3)
                {
                    atomicAdd(hit_counts[current_index].w, 1);
                    atomicAnd(hit_counts[current_index].x, 0);
                }
            }
            //

            uint temp = floatBitsToUint(current_voxel.links[direction_index_high][direction_index_low]);

            uint hits = 0;

            if (camera_data.which_hit_buffer == 0)
            {
                hits = hit_counts[current_index].w;
            }
            else if (camera_data.which_hit_buffer == 1)
            {
                hits = hit_counts[current_index].x;
            }
            else if (camera_data.which_hit_buffer == 2)
            {
                hits = hit_counts[current_index].y;
            }
            else if (camera_data.which_hit_buffer == 3)
            {
                hits = hit_counts[current_index].z;
            }

            if (temp == -1 || hits < 8)
            {
                normal = vec3(current_voxel.normal_x, current_voxel.normal_y, current_voxel.normal_z);
                color = vec3(current_voxel.color_r, current_voxel.color_g, current_voxel.color_b);
                break;
            }
            else
            {
                current_index = temp;
            }
        }
        else
        {
            current_index = floatBitsToUint(current_voxel.links[2 + direction_index_high][direction_index_low]);

            if (current_index == -1)
            {
                imageStore(render_target, ivec2(gl_GlobalInvocationID.xy), vec4(0.0, 0.0, 0.0, 1.0));
                return;
            }
        }
    }

    imageStore(render_target, ivec2(gl_GlobalInvocationID.xy), vec4(color * max(dot(normal, normalize(vec3(1.0, 1.0, 0.0))), 0.25), 1.0));
}