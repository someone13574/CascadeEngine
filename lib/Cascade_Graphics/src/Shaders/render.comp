#version 460

layout(local_size_x = 32, local_size_y = 32) in;

// bindings
layout(binding = 0, rgba8) uniform image2D render_target;

layout(binding = 1) uniform Camera_Data
{
    float matrix_x0;
    float matrix_x1;
    float matrix_x2;
    float matrix_y0;
    float matrix_y1;
    float matrix_y2;
    float matrix_z0;
    float matrix_z1;
    float matrix_z2;

    float origin_x;
    float origin_y;
    float origin_z;

    uint which_hit_buffer;

    uint pa;
    uint pb;
    uint pc;
} camera_data;

struct Voxel
{
    float x;
    float y;
    float z;
    float size;

    mat4x4 links;
};

layout(std140, binding = 2) buffer voxel_buffer
{
    Voxel voxels[];
};

layout(std140, binding = 3) buffer hit_buffer
{
    ivec4 hit_counts[];
};

float Ray_Box_Intersection(vec3 ray_origin, vec3 fractional_ray_direction, float box_size, out vec3 normal)
{
    vec3 n = ray_origin * fractional_ray_direction;
    vec3 k = box_size * abs(fractional_ray_direction);

    vec3 t1 = -n - k;
    vec3 t2 = -n + k;

    float tN = max(max(t1.x, t1.y), t1.z);
    float tF = min(min(t2.x, t2.y), t2.z);

    if (tN >= tF || tF < 0.0)
    {
        normal = vec3(0);
        return 1.0/0.0;
    }

    normal = -sign(fractional_ray_direction) * step(t1.yzx, t1.xyz) * step(t1.zxy, t1.xyz);
    return tN;
}

// code
void main()
{
    vec2 texture_size = imageSize(render_target);
    vec2 uv = (-texture_size + 2.0 * (gl_GlobalInvocationID.xy + vec2(0.5, 0.5))) / texture_size.y;

    vec3 ray_origin = vec3(camera_data.origin_x, camera_data.origin_y, camera_data.origin_z);
    vec3 ray_direction = normalize(vec3(uv.x, -uv.y, 1.0) * mat3x3(camera_data.matrix_x0, camera_data.matrix_x1, camera_data.matrix_x2, camera_data.matrix_y0, camera_data.matrix_y1, camera_data.matrix_y2, camera_data.matrix_z0, camera_data.matrix_z1, camera_data.matrix_z2));
    vec3 fractional_ray_direction = 1.0 / ray_direction;

    uint direction_index_low = uint(ray_direction.x < 0.0) | (uint(ray_direction.y < 0.0) << 1);
    uint direction_index_high = uint(ray_direction.z < 0.0);

    float hit_distance = 0;
    vec3 normal = vec3(0);
    bool voxel_edge = false;

    uint current_index = 0;

    uint iteration = 0;
    while (iteration < 1000000000 && current_index != -1 && current_index < voxels.length())
    {
        iteration++;

        Voxel current_voxel = voxels[current_index];

        vec3 current_normal;
        float dst = Ray_Box_Intersection(ray_origin - vec3(current_voxel.x, current_voxel.y, current_voxel.z), fractional_ray_direction, current_voxel.size, current_normal);

        if (dst == 1.0 / 0.0)
        {
            current_index = floatBitsToUint(current_voxel.links[2 + direction_index_high][direction_index_low]);
        }
        else
        {
            //
            if (camera_data.which_hit_buffer == 0)
            {
                atomicAdd(hit_counts[current_index].x, 1);
                atomicAdd(hit_counts[current_index].y, 1);
                hit_counts[current_index].z = 0;
            }
            else if (camera_data.which_hit_buffer == 1)
            {
                atomicAdd(hit_counts[current_index].y, 1);
                atomicAdd(hit_counts[current_index].z, 1);
                hit_counts[current_index].w = 0;
            }
            else if (camera_data.which_hit_buffer == 2)
            {
                atomicAdd(hit_counts[current_index].z, 1);
                atomicAdd(hit_counts[current_index].w, 1);
                hit_counts[current_index].x = 0;
            }
            else if (camera_data.which_hit_buffer == 3)
            {
                atomicAdd(hit_counts[current_index].w, 1);
                atomicAdd(hit_counts[current_index].x, 1);
                hit_counts[current_index].y = 0;
            }
            //

            uint temp = floatBitsToUint(current_voxel.links[direction_index_high][direction_index_low]);

            uint hits = 0;

            if (camera_data.which_hit_buffer == 0)
            {
                hits = hit_counts[current_index].w;
            }
            else if (camera_data.which_hit_buffer == 1)
            {
                hits = hit_counts[current_index].x;
            }
            else if (camera_data.which_hit_buffer == 2)
            {
                hits = hit_counts[current_index].y;
            }
            else if (camera_data.which_hit_buffer == 3)
            {
                hits = hit_counts[current_index].z;
            }

            if (temp == -1 || hits < 10)
            {
                normal = current_normal;
                hit_distance = dst;

                vec3 offset = abs((ray_direction * hit_distance + ray_origin) - vec3(current_voxel.x, current_voxel.y, current_voxel.z));

                bool x_face = (offset.x > current_voxel.size - (current_voxel.size * 0.25));
                bool y_face = (offset.y > current_voxel.size - (current_voxel.size * 0.25));
                bool z_face = (offset.z > current_voxel.size - (current_voxel.size * 0.25));

                voxel_edge = (x_face && y_face) || (x_face && z_face) || (y_face && z_face);

                break;
            }
            else
            {
                current_index = temp;
            }
        }
    }

    if (false) // voxel_edge
    {
        imageStore(render_target, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(0.0), 1.0));
    }
    else
    {
        imageStore(render_target, ivec2(gl_GlobalInvocationID.xy), vec4(abs(normal), 1.0));
    }
}